name: "Continuous Integration"

on:
  pull_request:
  push:
    branches:
      - "master"

env:
  fail-fast: false

jobs:

  phpunit-postgres:
    name: "PHPUnit with PostgreSQL"
    runs-on: "ubuntu-20.04"
    needs: "phpunit-smoke-check"

    strategy:
      matrix:
        php-version:
          - "7.4"
        postgres-version:
          - "9.2"
          - "9.4"
          - "13"
        include:
          - php-version: "8.0"
            postgres-version: "13"

    services:
      postgres:
        image: "postgres:${{ matrix.postgres-version }}"
        env:
          POSTGRES_PASSWORD: "postgres"

        options: >-
          --health-cmd "pg_isready || psql -U postgres -c 'SELECT 1'"

        ports:
          - "5432:5432"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"
          ini-values: "zend.assertions=1"

      - name: "Install dependencies with Composer"
        uses: "ramsey/composer-install@v1"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c tests/github/pdo_pgsql.xml --coverage-clover=coverage.xml"

  phpunit-mariadb:
    name: "PHPUnit with MariaDB"
    runs-on: "ubuntu-20.04"
    needs: "phpunit-smoke-check"

    strategy:
      matrix:
        php-version:
          - "7.4"
        mariadb-version:
          - "10.0"
          - "10.2"
          - "10.5"
        extension:
          - "pdo_mysql"
        include:
          - php-version: "8.0"
            mariadb-version: "10.5"
            extension: "pdo_mysql"

    services:
      mariadb:
        image: "mariadb:${{ matrix.mariadb-version }}"
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: "spatial_tests"

        options: >-
          --health-cmd "mysqladmin ping --silent"

        ports:
          - "3306:3306"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"
          ini-values: "zend.assertions=1"
          extensions: "${{ matrix.extension }}"

      - name: "Install dependencies with Composer"
        uses: "ramsey/composer-install@v1"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c tests/github/${{ matrix.extension }}.xml --coverage-clover=coverage.xml"

  phpunit-mysql:
    name: "PHPUnit with MySQL"
    runs-on: "ubuntu-20.04"
    needs: "phpunit-smoke-check"

    strategy:
      matrix:
        php-version:
          - "7.4"
        mysql-version:
          - "5.7"
          - "8.0"
        extension:
          - "pdo_mysql"
        config-file-suffix:
          - ""
        include:
          - php-version: "7.3"
            mysql-version: "8.0"
            extension: "pdo_mysql"
            custom-entrypoint: >-
              --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
          - mysql-version: "5.7"
          - mysql-version: "8.0"
            # https://stackoverflow.com/questions/60902904/how-to-pass-mysql-native-password-to-mysql-service-in-github-actions
            custom-entrypoint: >-
              --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
          - php-version: "8.0"
            mysql-version: "8.0"
            extension: "pdo_mysql"
            custom-entrypoint: >-
              --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"

    services:
      mysql:
        image: "mysql:${{ matrix.mysql-version }}"

        options: >-
          --health-cmd "mysqladmin ping --silent"
          -e MYSQL_ALLOW_EMPTY_PASSWORD=yes
          -e MYSQL_DATABASE=spatial_tests
          ${{ matrix.custom-entrypoint }}

        ports:
          - "3306:3306"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"
          ini-values: "zend.assertions=1"
          extensions: "${{ matrix.extension }}"

      - name: "Install dependencies with Composer"
        uses: "ramsey/composer-install@v1"

      - name: "Run PHPUnit"
        run: "vendor/bin/phpunit -c tests/github/${{ matrix.extension }}${{ matrix.config-file-suffix }}.xml --coverage-clover=coverage.xml"





